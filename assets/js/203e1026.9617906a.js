"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[27711],{3905:(e,n,r)=>{r.r(n),r.d(n,{MDXContext:()=>u,MDXProvider:()=>m,mdx:()=>v,useMDXComponents:()=>c,withMDXComponents:()=>d});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},l.apply(this,arguments)}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=t.createContext({}),d=function(e){return function(n){var r=c(n.components);return t.createElement(e,l({},n,{components:r}))}},c=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=c(e.components);return t.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return r?t.createElement(f,i(i({ref:n},u),{},{components:r})):t.createElement(f,i({ref:n},u))}));function v(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},85162:(e,n,r)=>{r.r(n),r.d(n,{default:()=>o});var t=r(67294),a=r(34334);const l="tabItem_Ymn6";function o(e){var n=e.children,r=e.hidden,o=e.className;return t.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,o),hidden:r},n)}},65488:(e,n,r)=>{r.r(n),r.d(n,{default:()=>p});var t=r(83117),a=r(67294),l=r(34334),o=r(72389),i=r(67392),s=r(7094),u=r(12466);const d="tabList__CuJ",c="tabItem_LNqP";function m(e){var n,r,o=e.lazy,m=e.block,p=e.defaultValue,f=e.values,v=e.groupId,y=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=f?f:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),h=(0,i.l)(g,(function(e,n){return e.value===n.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var x=null===p?p:null!=(n=null!=p?p:null==(r=b.find((function(e){return e.props.default})))?void 0:r.props.value)?n:b[0].props.value;if(null!==x&&!g.some((function(e){return e.value===x})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+x+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,s.U)(),N=T.tabGroupChoices,w=T.setTabGroupChoices,O=(0,a.useState)(x),k=O[0],D=O[1],R=[],E=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=v){var j=N[v];null!=j&&j!==k&&g.some((function(e){return e.value===j}))&&D(j)}var F=function(e){var n=e.currentTarget,r=R.indexOf(n),t=g[r].value;t!==k&&(E(n),D(t),null!=v&&w(v,String(t)))},C=function(e){var n,r=null;switch(e.key){case"ArrowRight":var t,a=R.indexOf(e.currentTarget)+1;r=null!=(t=R[a])?t:R[0];break;case"ArrowLeft":var l,o=R.indexOf(e.currentTarget)-1;r=null!=(l=R[o])?l:R[R.length-1]}null==(n=r)||n.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",d)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},y)},g.map((function(e){var n=e.value,r=e.label,o=e.attributes;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:function(e){return R.push(e)},onKeyDown:C,onFocus:F,onClick:F},o,{className:(0,l.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":k===n})}),null!=r?r:n)}))),o?(0,a.cloneElement)(b.filter((function(e){return e.props.value===k}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}function p(e){var n=(0,o.default)();return a.createElement(m,(0,t.Z)({key:String(n)},e))}},20868:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>y,frontMatter:()=>d,metadata:()=>m,toc:()=>f});var t=r(83117),a=r(80102),l=(r(67294),r(3905)),o=r(86341),i=r(65488),s=r(85162),u=["components"],d={id:"defining-fields",title:"Defining Fields",slug:"/guides/relay-resolvers/defining-fields/",description:"How to define fields for your client state schema using Relay Resolvers"},c=void 0,m={unversionedId:"guides/relay-resolvers/defining-fields",id:"guides/relay-resolvers/defining-fields",title:"Defining Fields",description:"How to define fields for your client state schema using Relay Resolvers",source:"@site/docs/guides/relay-resolvers/defining-fields.md",sourceDirName:"guides/relay-resolvers",slug:"/guides/relay-resolvers/defining-fields/",permalink:"/docs/next/guides/relay-resolvers/defining-fields/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/docs/guides/relay-resolvers/defining-fields.md",tags:[],version:"current",frontMatter:{id:"defining-fields",title:"Defining Fields",slug:"/guides/relay-resolvers/defining-fields/",description:"How to define fields for your client state schema using Relay Resolvers"},sidebar:"docs",previous:{title:"Defining Types",permalink:"/docs/next/guides/relay-resolvers/defining-types/"},next:{title:"Return Types",permalink:"/docs/next/guides/relay-resolvers/return-types/"}},p={},f=[{value:"Syntax",id:"syntax",level:2}],v={toc:f};function y(e){var n=e.components,r=(0,a.Z)(e,u);return(0,l.mdx)("wrapper",(0,t.Z)({},v,r,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"Defining fields on a client type is as simple as defining a resolver function which accepts an instance of your model type as its first argument and returns the field value. Note that the exported function name must match the field name."),(0,l.mdx)("h2",{id:"syntax"},"Syntax"),(0,l.mdx)("p",null,"Relay resolvers are marked via docblocks above a resolver function. ",(0,l.mdx)("inlineCode",{parentName:"p"},"@RelayResolver")," is the tag to indicate the start of any Relay resolver definition. To define a field on a GraphQL model type ",(0,l.mdx)("inlineCode",{parentName:"p"},"TypeName"),":"),(0,l.mdx)(i.default,{groupId:"resolver",defaultValue:"Docblock",values:(0,o.fbContent)({internal:[{label:"Docblock",value:"Docblock"},{label:"Flow",value:"Flow"}],external:[{label:"Docblock",value:"Docblock"}]}),mdxType:"Tabs"},(0,l.mdx)(s.default,{value:"Docblock",mdxType:"TabItem"},(0,l.mdx)("p",null," Add ",(0,l.mdx)("inlineCode",{parentName:"p"},"TypeName")," followed by a dot followed by the field definition using GraphQL's schema definition language: ",(0,l.mdx)("a",{parentName:"p",href:"https://spec.graphql.org/June2018/#FieldDefinition"},"https://spec.graphql.org/June2018/#FieldDefinition")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"/**\n* @RelayResolver TypeName.fieldName(arg1: ArgTypeName): FieldTypeName\n*/\n"))),(0,l.mdx)(s.default,{value:"Flow",mdxType:"TabItem"},(0,l.mdx)(o.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,l.mdx)("p",null,"Import and use the Flow type for the object, Relay finds the GraphQL type linked to ",(0,l.mdx)("inlineCode",{parentName:"p"},"TypeName"),", and use the function name as the field name"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {TypeName} from 'TypeObject';\n\n/**\n * @RelayResolver\n */\nexport function fieldName(user: TypeName): string {\n  return user.name;\n}\n"))))),(0,l.mdx)("p",null,"A simple field might look something like this:"),(0,l.mdx)(i.default,{groupId:"resolver",defaultValue:"Docblock",values:(0,o.fbContent)({internal:[{label:"Docblock",value:"Docblock"},{label:"Flow",value:"Flow"}],external:[{label:"Docblock",value:"Docblock"}]}),mdxType:"Tabs"},(0,l.mdx)(s.default,{value:"Docblock",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @RelayResolver User.name: String\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n"))),(0,l.mdx)(s.default,{value:"Flow",mdxType:"TabItem"},(0,l.mdx)(o.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @RelayResolver\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n"))))),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"Relay will take care of efficiently recomputing resolvers when any of their inputs (in this case the model instance) change, so you don\u2019t need to worry about memoizing your resolver function.")),(0,l.mdx)("p",null,"This is just a simple resolver that reads from the model type and returns a scalar value. To learn about the full menu of capabilities that resolver fields support see:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"/docs/next/guides/relay-resolvers/return-types/"},"Resolver Return Types")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"/docs/next/guides/relay-resolvers/field-arguments/"},"Field Arguments")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"/docs/next/guides/relay-resolvers/live-fields/"},"Live Fields")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"/docs/next/guides/relay-resolvers/derived-fields/"},"Derived Fields"))))}y.isMDXComponent=!0}}]);