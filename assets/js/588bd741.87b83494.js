"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[94053],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){return function(t){var n=m(t.components);return r.createElement(e,i({},t,{components:n}))}},m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=m(n),u=a,f=c["".concat(o,".").concat(u)]||c[u]||d[u]||i;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},89386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var r=n(83117),a=n(80102),i=(n(67294),n(3905)),o=["components"],l={id:"quick-start",title:"Quick Start",slug:"/getting-started/quick-start/",description:"Get up an running with Relay",keywords:["quick"]},p=void 0,s={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",title:"Quick Start",description:"Get up an running with Relay",source:"@site/docs/getting-started/quick-start.md",sourceDirName:"getting-started",slug:"/getting-started/quick-start/",permalink:"/docs/next/getting-started/quick-start/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/docs/getting-started/quick-start.md",tags:[],version:"current",frontMatter:{id:"quick-start",title:"Quick Start",slug:"/getting-started/quick-start/",description:"Get up an running with Relay",keywords:["quick"]},sidebar:"docs",previous:{title:"Home",permalink:"/docs/next/"},next:{title:"Relay Babel Plugin",permalink:"/docs/next/getting-started/babel-plugin/"}},c={},m=[{value:"Scaffold a React App",id:"scaffold-a-react-app",level:2},{value:"Install Dependencies",id:"install-dependencies",level:2},{value:"Configure Vite to use Relay",id:"configure-vite-to-use-relay",level:2},{value:"Configure the Relay Compiler",id:"configure-the-relay-compiler",level:2},{value:"Configure your Relay Environment",id:"configure-your-relay-environment",level:2},{value:"Define your first Relay component",id:"define-your-first-relay-component",level:2},{value:"Compile and run your app",id:"compile-and-run-your-app",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.mdx)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"This quick start guide will start with a new React app using Vite and show you how to add Relay to it."),(0,i.mdx)("admonition",{type:"tip"},(0,i.mdx)("p",{parentName:"admonition"},"If you'd prefer an automated approach, ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/tobias-tengler/create-relay-app"},(0,i.mdx)("inlineCode",{parentName:"a"},"create-relay-app"))," by Tobias Tengler will walk you through adding Relay to an existing React app via a series of prompts: ",(0,i.mdx)("inlineCode",{parentName:"p"},"npm create @tobiastengler/relay-app"))),(0,i.mdx)("p",null,"We will be building a simple app which shows Star Wars movies fetched from the ",(0,i.mdx)("a",{parentName:"p",href:"https://graphql.org/swapi-graphql/"},"example Star Wars GraphQL API")," hosted by graphql.org."),(0,i.mdx)("h2",{id:"scaffold-a-react-app"},"Scaffold a React App"),(0,i.mdx)("p",null,"We\u2019ll start with a ",(0,i.mdx)("a",{parentName:"p",href:"https://vite.dev/"},"Vite")," React app using TypeScript."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"npm create vite -- --template react-ts\n")),(0,i.mdx)("p",null,"You\u2019ll be prompted for a project name. Type: ",(0,i.mdx)("inlineCode",{parentName:"p"},"relay-example")),(0,i.mdx)("h2",{id:"install-dependencies"},"Install Dependencies"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"cd relay-example\n\n# Note: Version 18^ of Relay is missing React 19 as a peer dependency. This will be fixed in the next release. Until then we must add `--force` to the following commands.\n\n# Runtime dependencies\nnpm install relay-runtime react-relay --force\n# Dev dependencies\nnpm install --dev vite-plugin-relay relay-compiler --force\n# Types\nnpm install --dev @types/relay-runtime @types/react-relay --force\n")),(0,i.mdx)("h2",{id:"configure-vite-to-use-relay"},"Configure Vite to use Relay"),(0,i.mdx)("p",null,"Relay uses a ",(0,i.mdx)("a",{parentName:"p",href:"/docs/next/getting-started/babel-plugin/"},"Babel plugin")," to insert code generated by the Relay compiler into your bundle. We can enable that transform in Vite with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"vite-plugin-relay")," plugin:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx",metastring:'title="vite.config.ts"',title:'"vite.config.ts"'},"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n// change-line\nimport relay from 'vite-plugin-relay';\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    // change-line\n    relay\n  ],\n})\n")),(0,i.mdx)("p",null,"See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/next/getting-started/babel-plugin/"},"Babel Plugin")," for information about how to configure the Babel plugin for other build systems."),(0,i.mdx)("h2",{id:"configure-the-relay-compiler"},"Configure the Relay Compiler"),(0,i.mdx)("p",null,"Next we will download the schema for the Star Wars GraphQL endpoint and configure the Relay compiler to use that schema:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"curl -O https://raw.githubusercontent.com/graphql/swapi-graphql/refs/heads/master/schema.graphql\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json",metastring:'title="relay.config.json"',title:'"relay.config.json"'},'{\n  "src": "./src",\n  "schema": "./schema.graphql",\n  "language": "typescript",\n  "eagerEsModules": true\n}\n')),(0,i.mdx)("p",null,"See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/next/guides/compiler/"},"Relay Compiler")," for more information about configuring and running the Relay compiler."),(0,i.mdx)("h2",{id:"configure-your-relay-environment"},"Configure your Relay Environment"),(0,i.mdx)("p",null,"To allow components within our application to fetch GraphQL we configure a Relay Environment to fetch from our test endpoint and add it to React context."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/main.tsx"',title:'"src/main.tsx"'},'import { StrictMode, Suspense } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./index.css";\nimport App from "./App.tsx";\nimport { RelayEnvironmentProvider } from "react-relay";\nimport {\n  Environment,\n  Store,\n  RecordSource,\n  Network,\n  FetchFunction,\n} from "relay-runtime";\n\nconst HTTP_ENDPOINT = "https://graphql.org/graphql/";\n\nconst fetchGraphQL: FetchFunction = async (request, variables) => {\n  const resp = await fetch(HTTP_ENDPOINT, {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({ query: request.text, variables }),\n  });\n  if (!resp.ok) {\n    throw new Error("Response failed.");\n  }\n  return await resp.json();\n};\n\nconst environment = new Environment({\n  store: new Store(new RecordSource({})),\n  network: Network.create(fetchGraphQL),\n});\n\ncreateRoot(document.getElementById("root")!).render(\n  <StrictMode>\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback="Loading...">\n        <App />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  </StrictMode>\n);\n')),(0,i.mdx)("p",null,"See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/next/api-reference/relay-runtime/relay-environment"},"Relay Environment")," for an overview of the Relay Environment and how to configure it."),(0,i.mdx)("h2",{id:"define-your-first-relay-component"},"Define your first Relay component"),(0,i.mdx)("p",null,"Finally we can start defining the data we want to fetch and build our UI:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { AppQuery } from "./__generated__/AppQuery.graphql";\nimport { graphql, useLazyLoadQuery } from "react-relay";\n\nexport default function App() {\n  const data = useLazyLoadQuery<AppQuery>(\n    graphql`\n      query AppQuery {\n        allFilms {\n          films {\n            id\n            title\n            director\n          }\n        }\n      }\n    `,\n    {}\n  );\n\n  const films = data?.allFilms?.films?.filter((film) => film != null);\n\n  return (\n    <div>\n      <h1>Star Wars Films</h1>\n      {films?.map((film) => (\n        <li key={film.id}>\n          <b>{film.title}</b>: directed by <i>{film.director}</i>\n        </li>\n      ))}\n    </div>\n  );\n}\n')),(0,i.mdx)("h2",{id:"compile-and-run-your-app"},"Compile and run your app"),(0,i.mdx)("p",null,"All that\u2019s left is to run the Relay compiler and start your app!"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"npx relay-compiler\nnpm run dev\n")),(0,i.mdx)("p",null,"You should now be able to open your app in a browser: ",(0,i.mdx)("a",{parentName:"p",href:"http://localhost:5173/"},"http://localhost:5173/")))}d.isMDXComponent=!0}}]);